/* Ex. 1 */
const arr = [1,2,3];

const arr2 = arr;

const temp = arr.unshift(12);
arr2.push(14);


//console.log(temp); // ?  [12,1,2,3]  // 4
// console.log(arr2); // ? [12,1,2,3,14]
// console.log(arr); // ?  [12,1,2,3,14]


/* Ex. 2 */

// 2 4 3 1
// setTimeout(() => {
//   console.log(1);
// });

// const p = new Promise((resolve) => {
//   console.log(2);
//   resolve();
// });

// p.then(() => {
//   console.log(3);
// })

// console.log(4);



/* Ex. 3 */

// Number.prototype.plus = function(val){
//     return this+val;
// }

// Number.prototype.minus = function(val){
//     return this-val;
// }

// console.log((1).plus(2).minus(1) === 2); 
// // expected result true


// Array.prototype.duplicator = function(){
//     const arr = this;
//     arr.push(...arr);
//     return arr;
// }

// console.log([1,2,3,4,5].duplicator()); 
// // expected result [1,2,3,4,5,1,2,3,4,5]

// Array.prototype.repeater = function(val){
//     const arr = [];
//      for(let i=1;i<=val;i++){
//        arr.push(...this);
//      }
//     return arr;
// }

// console.log([1,2,3,4,5].repeater(4)); 
// // expected result [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5]


/* Ex. 4 */

// const flat = (arr, ans = []) => {
//    arr.forEach((val) => {
//      if(Array.isArray(val)){
//        return flat(val, ans);
//      }else{
//        ans.push(val);
//      }
//    })
//    return ans;
// }


// console.log(flat([1, [2, [3, [4,5]]]]));
// result [1, 2, 3, 4, 5]



/* Ex. 5 */

// const data = [ 'abc', null, '', undefined, false, '', 123, true, -1 ];

// const filteredArray = (a) => {
//     const result = a.filter((val) => {
//       if(val){
//         return val;
//       }
//     })
//     return result;
// };

// console.log(filteredArray(data));
// // result [ 'abc', 123, true, -1 ];



/* Ex. 6 */

// const nonUnique = [ 1, 2, 45, 3, 2, 1, 3, 2, 1, 45, 5 ];

// const uniqueItems = (arr) => {
//   const setData = new Set(arr);
//   const result = [...setData];
//   return result;
// };

// console.log(uniqueItems(nonUnique));
// // result [ 1, 2, 45, 3, 5 ]

/* Ex. 7 */
// const arr4 = [ 'debounce', 'bounce',  'scare', 'wallmart', 'surface' ];
// const arr5 = [ 'bounce', 'wall', 'face', 'surf' ];

// const partialIntersection = (arr1, arr2) => {
//     const result = [];
//      for(let i=0;i<arr2.length;i++){
//        for(let j=0;j<arr1.length;j++){
//          if(arr1[j].includes(arr2[i]) || arr1[j] === arr2[i]){
//              result.push(arr1[j]);
//          }
//        }
//      }
//   return [...new Set(result)];
// };

// console.log(partialIntersection(arr4, arr5));
// // result [ 'debounce', 'bounce', wallmart', 'surface' ];


/* Ex. 8 */

const firstArr = [
  {
    name: 'test',
    desc: 'some description',
    isFav: false
  },
  {
    name: 'test 2',
    desc: 'some description 2',
    isFav: true
  },
  {
    name: 'test 3',
    desc: 'some description 3',
    isFav: false
  },
  {
    name: 'test 4',
    desc: 'some description 4',
    isFav: true
  },
];

const secondArr = [
  {
    name: '2 test',
    desc: '2 some description',
    isFav: true
  },
  {
    name: '2 test 2',
    desc: '2 some description 2',
    isFav: true
  },
  {
    name: '2 test 3',
    desc: '2 some description 3',
    isFav: false
  },
  {
    name: '2 test 4',
    desc: '2 some description 4',
    isFav: false
  },
  
];

const thirdArr = [
  {
    name: '3 test',
    desc: '3 some description',
    isFav: false
  },
  {
    name: '3 test 2',
    desc: '3 some description 2',
    isFav: false
  },
  {
    name: '3 test 3',
    desc: '3 some description 3',
    isFav: true
  },
  {
    name: '3test 4',
    desc: '3some description 4',
    isFav: false
  },
  
];

const getFavorites = (a, b, c) => {
  //TODO: implement
}

// console.log(getFavorites(firstArr, secondArr, thirdArr));
/*
[
  {
    name: 'test 2',
    desc: 'some description 2',
    isFav: true
  },
  {
    name: 'test 4',
    desc: 'some description 4',
    isFav: true
  },
  {
    name: '2 test',
    desc: '2 some description',
    isFav: true
  },
  {
    name: '2 test 2',
    desc: '2 some description 2',
    isFav: true
  },
  {
    name: '3 test 3',
    desc: '3 some description 3',
    isFav: true
  }
]


/* Ex. 9 */
// Write a simple memo function
// const memo = (fn) => {
//     cache = {};
//     const data = function(...args){
//       let sArgs = JSON.stringify(args);
//       if(sArgs in cache){
//         return cache[sArgs];
//       }else{
//         const result = fn(...args);
//         cache[sArgs] = result;
//         return result;
//       }
//     }
//     data.cache = cache;
//     return data;
// };

// const sum = memo((a, b) => a + b);
// console.log('1: ', sum(1, 2)); // 1: 3
// console.log('2: ', sum(2, 3)); // 2: 5
// console.log('cache', sum.cache); // should display cache values





