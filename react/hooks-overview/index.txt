All examples of hooks are available in:
https://github.com/machadop1407/react-hooks-course

1. useState - whenever we want to manage the state within our application, 
              we make use of useState to update the state and re-render the application so that it reflects the latest value always
    Syntax - const [value, setValue] = useState(0);
    // 0 - initial value
    value - holds the current value of the state
    setValue - update function which updates the state, as required

2. useReducer - Alternative to useState. When the values are changed, it shows the updated values. Main Benefit os using useReducer:
    a. when you have multiple/complex states to change, it is advised to use useReducer
    b. Syntax -  const [state, dispatch] = useReducer(reducer, initialValue);
        state - holds the current value. It could be an object which holds all state variables
        dispatch - triggered whenevr there is a user triggered change,
        reducer - actual function which is meant to update the state based on the action passed during dispatch
        initialValue - initial value of the state

3. useEffect - Used to perform side effects in our application. It is called whenever our application is rendered. We can decide the behaviour of rendering too, 
               when to call useEffect for render or ignore calling useEffect
    a. Primarily used for making API calls
    b. Syntax - useEffect(() => {
        // make API call
    });  // this syntax will make API call when the component is rendered for the first time and afterwards for every re-render
    c. Syntax - useEffect(() => {
        // make API call
    },[]);  // this syntax will make API call only once, when the component is rendered for the first time
    d. Syntax - useEffect(() => {
        // make API call
    },[count]);  // this syntax will make API call when the component is rendered for the first time and afterwards only when the value of "count" is changed

4. useRef - React Hook to access and manipulate DOM elements directly
    a. Syntax - const testRef = useRef(null);
                <input value="" ref={testRef}/>
    b. to access on any event - testRef.current.value/focus/...
    c. Best use-case - when we want to clear the input field after clicking on any event. Eg: to-do list

5. useLayoutEffect - Used when we want to do something before the rendering of appliation. It is called even before useEffect
    a Syntax - same as useEffect
    b. use-case - when any api calls can take time and useEffect takes time as it is called after the component is rendered.

6. useImperativeHandle - this hook is used when we want to update the state through the parent component which is defined in the child component
    a. syntax - It uses useRef, forwardRef , 
    useImperativeHandle(ref, () => { 
        // function which will update the state: 
        function updateToggle(){
            setToggle(false)
        }
    })
    b. when we have a reusable component that needs to be invoked from outside

8.   useMemo - When we have expensive calculations and doesnt waant to re-calculate on every render, we can make use of useMemo. It takes in a callback function which 
               returns a value which is memoized. It also has a dependency array which indicates when this callback needs to be executed. If any dependency array
               variable changes, we make computtation again, else ignore it. 
    syntax - const getName = useMemo(() => expensiveCal(), []);
    https://codesandbox.io/s/purple-brook-v34ee8?file=/src/App.js:0-1234
    
9. useCallback - Similar to useMemo. It returns a function instead of value
    syntax - const expensiveCall = useCallback(() => {
            // perform the computation in this
        },[]);
    https://codesandbox.io/s/compassionate-nightingale-ye750j?file=/src/App.js


